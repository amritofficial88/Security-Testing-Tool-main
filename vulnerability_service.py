import os
import subprocess
import re
import requests
import time
import hashlib
from dotenv import load_dotenv
import streamlit as st
from streamlit_ace import st_ace

load_dotenv()


class VulnerabilityService:
    def detect_vulnerabilities(self, code):
        """Detect vulnerabilities using Bandit"""
        with open("temp_code.py", "w", encoding="utf-8") as temp_file:
            temp_file.write(code)

        result = subprocess.run(
            ['bandit', '-r', 'temp_code.py'], capture_output=True, text=True, encoding="utf-8")

        filtered_output = re.sub(r'CWE:.*?\n', '', result.stdout)
        filtered_output = re.sub(r'More Info:.*?\n', '', filtered_output)

        return filtered_output


class MalwareService:
    def __init__(self):
        self.api_key = st.secrets["VIRUSTOTAL_API_KEY"]
        self.headers = {"x-apikey": self.api_key} if self.api_key else {}

    def scan_file(self, file_content, file_name):
        """Complete VirusTotal analysis workflow with proper polling"""
        try:
            # Validate API key first
            if not self.api_key:
                return {"error": "VirusTotal API key not configured"}

            # Step 1: Upload file and get analysis ID
            upload_response = self._upload_file(file_content, file_name)
            if 'error' in upload_response:
                return upload_response

            analysis_id = upload_response.get('data', {}).get('id')
            if not analysis_id:
                return {"error": "Failed to get analysis ID from upload"}

            # Step 2: Poll analysis status until completion
            analysis_result = self._poll_analysis(analysis_id)
            if 'error' in analysis_result:
                return analysis_result

            # Step 3: Get final report using SHA256 from analysis
            sha256 = analysis_result.get('meta', {}).get(
                'file_info', {}).get('sha256')
            if not sha256:
                return {"error": "Failed to get file SHA256 from analysis"}

            return self._get_final_report(sha256)

        except Exception as e:
            return {"error": f"Scan failed: {str(e)}"}

    def _upload_file(self, file_content, file_name):
        """Handle file upload with size validation"""
        try:
            # Check file size (650MB limit for free tier)
            if len(file_content) > 650 * 1024 * 1024:
                return {"error": "File size exceeds 650MB limit"}

            response = requests.post(
                "https://www.virustotal.com/api/v3/files",
                headers=self.headers,
                files={'file': (file_name, file_content)}
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": f"Upload failed: {str(e)}"}

    def _poll_analysis(self, analysis_id):
        """Poll analysis status with extended timeout"""
        max_attempts = 30  # 15 minute timeout
        for _ in range(max_attempts):
            try:
                response = requests.get(
                    f"https://www.virustotal.com/api/v3/analyses/{analysis_id}",
                    headers=self.headers
                )
                response.raise_for_status()

                data = response.json()
                status = data.get('data', {}).get(
                    'attributes', {}).get('status')

                if status == 'completed':
                    return data

                time.sleep(30)  # Check every 30 seconds
            except requests.exceptions.RequestException:
                time.sleep(30)

        return {"error": "Analysis timed out after 15 minutes"}

    def _get_final_report(self, sha256):
        """Retrieve final analysis report"""
        try:
            response = requests.get(
                f"https://www.virustotal.com/api/v3/files/{sha256}",
                headers=self.headers
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": f"Failed to get final report: {str(e)}"}

    def get_local_sha256(self, file_content):
        """Calculate SHA256 locally for verification"""
        return hashlib.sha256(file_content).hexdigest()
